moduleDependencies(project, [
        "c2me-base",
])

apply plugin: 'c'

sourceCompatibility = JavaVersion.VERSION_19
targetCompatibility = JavaVersion.VERSION_19

model {
    platforms {
        windows {
            architecture "x86_64"
            operatingSystem "windows"
        }
        linux {
            architecture "x86_64"
            operatingSystem "linux"
        }
    }

    toolChains {
        clang(Clang) {
            target("linux")
        }
        mingw(Gcc){
            target("windows")
            eachPlatform() {
                cCompiler.executable "x86_64-w64-mingw32-gcc"
                cppCompiler.executable "x86_64-w64-mingw32-g++"
                linker.executable "x86_64-w64-mingw32-g++"
                assembler.executable "x86_64-w64-mingw32-as"
                staticLibArchiver.executable "x86_64-w64-mingw32-ar"
            }
        }
    }

    components {
        natives(NativeLibrarySpec) {
            targetPlatform "windows"
            targetPlatform "linux"
            binaries.all {
//                cCompiler.args '-g'
                cCompiler.args '-O3'
//                cCompiler.args '-march=x86-64'
                cCompiler.args '-mtune=tigerlake'
//                cCompiler.args '-lto'
                cCompiler.args '-std=c11'
                linker.args '-flto'
                if (targetPlatform.operatingSystem.macOsX) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/darwin"
                    cCompiler.args '-mmacosx-version-min=10.4'
                    linker.args '-mmacosx-version-min=10.4'
                } else if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
                    cCompiler.args '-D_FILE_OFFSET_BITS=64'
                } else if (targetPlatform.operatingSystem.windows) {
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
                    cCompiler.args "-fPIC"
                    linker.args "-LShlwapi", "-LAdvapi32"
                } else if (targetPlatform.operatingSystem.freeBSD) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/freebsd"
                }
            }
        }
    }
}

processResources {
    with copySpec {
        from(buildDir.toPath().resolve("libs").resolve("natives").resolve("shared").resolve("linux")) {
            include '/*.so'
        }
        rename { "libc2me-natives-opts.so" }
    }
    with copySpec {
        from(buildDir.toPath().resolve("libs").resolve("natives").resolve("shared").resolve("windows")) {
            include '/*.dll'
        }
        rename { "libc2me-natives-opts.dll" }
    }

    dependsOn "nativesLinuxSharedLibrary"
    dependsOn "nativesWindowsSharedLibrary"
}

tasks.withType(JavaCompile).configureEach {
    it.options.compilerArgs << "--enable-preview"
}
